Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id


Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: hello-20190626
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: True

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: hello-20190626
      GenerateSecret: false
      RefreshTokenValidity: 30
      UserPoolId: !Ref UserPool

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: hello_20190626
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !Sub 'cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}'
          ServerSideTokenCheck: true

  AuthRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: AllowLambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource:
                - !GetAtt NormalFunction.Arn
                - !GetAtt VPCFunction.Arn
                - !GetAtt RubyFunction.Arn

  UnauthRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': unauthenticated

  IdentityPoolRole:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt AuthRole.Arn
        unauthenticated: !GetAtt UnauthRole.Arn

  NormalFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: python3.7
      InlineCode: |
        def handler(event, context):
          return 'Hello :-)'

  VPCFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: python3.7
      InlineCode: |
        def handler(event, context):
          return 'Hello from VPC ;-)'
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds: !Ref Subnets
      Policies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  RubyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.handler
      Runtime: ruby2.5
      CodeUri: ./helloruby
      MemorySize: 256
      Timeout: 30
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds: !Ref Subnets
      Policies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - Statement:
          - Effect: Allow
            Action:
              - ecs:ListContainerInstances
              - ecs:DescribeContainerInstances
              - ecs:ListTasks
              - ecs:DescribeTasks
            Resource:
              - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/homepage
          - Effect: Allow
            Action:
              - ec2:DescribeInstances
            Resource: '*'

Outputs:
  UserPoolID:
    Value: !Ref UserPool
  ClientID:
    Value: !Ref UserPoolClient
  IdentityPoolID:
    Value: !Ref IdentityPool
