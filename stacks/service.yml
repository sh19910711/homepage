Description: >
    This is an example of a long running ECS service that needs to connect to another ECS service (product-service)
    via it's load balancer. We use environment variables to pass the URL of the product-service to this one's container(s).

Parameters:
    VPC:
        Description: The VPC that the ECS cluster is deployed to
        Type: AWS::EC2::VPC::Id

    Cluster:
        Description: Please provide the ECS Cluster ID that this service should run on
        Type: String

    DesiredCount:
        Description: How many instances of this task should we run across our cluster?
        Type: Number
        Default: 1

    MaxCount:
        Description: Maximum number of instances of this task we can run across our cluster
        Type: Number
        Default: 2

    Listener:
        Description: The Application Load Balancer listener to register with
        Type: String

    Subnets:
        Description: Choose which subnets the Application Load Balancer should be deployed to
        Type: List<AWS::EC2::Subnet::Id>

    SecurityGroup:
        Description: Select the Security Group to apply to the Application Load Balancer
        Type: AWS::EC2::SecurityGroup::Id

    SecurityGroupAllowInternal:
        Description: Select the Security Group to apply to the Application Load Balancer
        Type: AWS::EC2::SecurityGroup::Id

    ECSServiceAutoScalingRoleARN:
        Description: The ECS service auto scaling role ARN
        Type: String

Resources:
    WebService:
        Type: AWS::ECS::Service
        DependsOn:
          - ListenerRule
        Properties:
            Cluster: !Ref Cluster
            DesiredCount: 1
            TaskDefinition: !Ref WebTaskDefinition
            LoadBalancers:
                - ContainerName: homepage
                  ContainerPort: 8080
                  TargetGroupArn: !Ref TargetGroup
            ServiceRegistries:
              - RegistryArn: !GetAtt WebDiscoveryService.Arn
            NetworkConfiguration:
              AwsvpcConfiguration:
                SecurityGroups:
                  - !Ref SecurityGroup
                  - !Ref SecurityGroupAllowInternal
                Subnets: !Ref Subnets

    DatabaseService:
        Type: AWS::ECS::Service
        Properties:
            Cluster: !Ref Cluster
            DesiredCount: 1
            TaskDefinition: !Ref DatabaseTaskDefinition
            ServiceRegistries:
              - RegistryArn: !GetAtt DatabaseDiscoveryService.Arn
            NetworkConfiguration:
              AwsvpcConfiguration:
                SecurityGroups:
                  - !Ref SecurityGroup
                  - !Ref SecurityGroupAllowInternal
                Subnets: !Ref Subnets

    SearchService:
        Type: AWS::ECS::Service
        Properties:
            Cluster: !Ref Cluster
            DesiredCount: 1
            TaskDefinition: !Ref SearchTaskDefinition
            ServiceRegistries:
              - RegistryArn: !GetAtt SearchDiscoveryService.Arn
            NetworkConfiguration:
              AwsvpcConfiguration:
                SecurityGroups:
                  - !Ref SecurityGroup
                  - !Ref SecurityGroupAllowInternal
                Subnets: !Ref Subnets

    PrivateNamespace2:
      Type: AWS::ServiceDiscovery::PrivateDnsNamespace
      Properties:
        Name: homepage2
        Vpc: !Ref VPC

    WebDiscoveryService:
      Type: AWS::ServiceDiscovery::Service
      Properties:
        Description: Discovery Service for Backend
        DnsConfig:
          DnsRecords:
            - TTL: 10
              Type: A
        HealthCheckCustomConfig:
          FailureThreshold: 1
        Name: web
        NamespaceId: !Ref PrivateNamespace2

    DatabaseDiscoveryService:
      Type: AWS::ServiceDiscovery::Service
      Properties:
        Description: Discovery Service for Backend
        DnsConfig:
          DnsRecords:
            - TTL: 10
              Type: A
        HealthCheckCustomConfig:
          FailureThreshold: 1
        Name: database
        NamespaceId: !Ref PrivateNamespace2

    SearchDiscoveryService:
      Type: AWS::ServiceDiscovery::Service
      Properties:
        Description: Discovery Service for Backend
        DnsConfig:
          DnsRecords:
            - TTL: 10
              Type: A
        HealthCheckCustomConfig:
          FailureThreshold: 1
        Name: search
        NamespaceId: !Ref PrivateNamespace2

    TaskRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        AssumeRolePolicyDocument:
          Statement:
            - Principal:
                Service:
                  - ecs.amazonaws.com
                  - ecs-tasks.amazonaws.com
              Action: 'sts:AssumeRole'
              Effect: Allow
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role'

    TaskRolePolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: Full
        Roles:
          - !Ref TaskRole
        PolicyDocument:
          Statement:
            - Effect: Allow
              Resource: "arn:aws:s3:::hiroyuki.sano.ninja/zeppelin/notebook/*"
              Action:
                - "s3:GetObject"

            - Effect: Allow
              Resource: "*"
              Action:
                - "cloudwatch:*"

    WebTaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: homepage-web
            ExecutionRoleArn: !Ref TaskRole
            TaskRoleArn: !Ref TaskRole
            NetworkMode: awsvpc
            ContainerDefinitions:
                - Name: homepage
                  Essential: true
                  Image: sh19910711/homepage:0.0.26
                  Memory: 100
                  Environment:
                    - Name: DATABASE_HOST
                      Value: database.homepage2
                    - Name: SEARCH_HOST
                      Value: search.homepage2
                    - Name: S3_BUCKET
                      Value: cloud9-tmp
                    - Name: S3_PREFIX
                      Value: homepage/
                    - Name: AWS_REGION
                      Value: us-east-1
                    - Name: RACK_ENV
                      Value: production
                  PortMappings:
                    - Protocol: tcp
                      ContainerPort: 8080
                      HostPort: 8080
                  LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref AWS::StackName
                        awslogs-region: !Ref AWS::Region

    DatabaseTaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: database
            ExecutionRoleArn: !Ref TaskRole
            TaskRoleArn: !Ref TaskRole
            NetworkMode: awsvpc
            ContainerDefinitions:
                - Name: database
                  Essential: true
                  Image: mariadb:10.4.1
                  Memory: 512
                  PortMappings:
                    - Protocol: tcp
                      ContainerPort: 3306
                      HostPort: 3306
                  Environment:
                    - Name: MYSQL_ROOT_PASSWORD
                      Value: mysql
                  LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref AWS::StackName
                        awslogs-region: !Ref AWS::Region

    SearchTaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: search
            ExecutionRoleArn: !Ref TaskRole
            TaskRoleArn: !Ref TaskRole
            NetworkMode: awsvpc
            ContainerDefinitions:
                - Name: search
                  Essential: true
                  Image: docker.elastic.co/elasticsearch/elasticsearch:6.5.4
                  Memory: 512
                  PortMappings:
                    - Protocol: tcp
                      ContainerPort: 9200
                      HostPort: 9200
                  Environment:
                    - Name: discovery.type
                      Value: single-node
                    - Name: ES_JAVA_OPTS
                      Value: "-Xms256m -Xmx256m"
                  LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref AWS::StackName
                        awslogs-region: !Ref AWS::Region

    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 365

    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            VpcId: !Ref VPC
            Port: 80
            Protocol: HTTP
            TargetType: ip
            Matcher:
                HttpCode: 200-299
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /ping
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2

    ListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref Listener
            Priority: 1
            Conditions:
                - Field: path-pattern
                  Values:
                    - /
            Actions:
                - TargetGroupArn: !Ref TargetGroup
                  Type: forward

    WebServiceScalableTarget:
        Type: "AWS::ApplicationAutoScaling::ScalableTarget"
        Properties:
            MaxCapacity: !Ref MaxCount
            MinCapacity: !Ref DesiredCount
            ResourceId: !Join
                - /
                - - service
                  - !Ref Cluster
                  - !GetAtt WebService.Name
            RoleARN: !Ref ECSServiceAutoScalingRoleARN
            ScalableDimension: ecs:service:DesiredCount
            ServiceNamespace: ecs

    DatabaseServiceScalableTarget:
        Type: "AWS::ApplicationAutoScaling::ScalableTarget"
        Properties:
            MaxCapacity: !Ref MaxCount
            MinCapacity: !Ref DesiredCount
            ResourceId: !Join
                - /
                - - service
                  - !Ref Cluster
                  - !GetAtt DatabaseService.Name
            RoleARN: !Ref ECSServiceAutoScalingRoleARN
            ScalableDimension: ecs:service:DesiredCount
            ServiceNamespace: ecs

    SearchServiceScalableTarget:
        Type: "AWS::ApplicationAutoScaling::ScalableTarget"
        Properties:
            MaxCapacity: !Ref MaxCount
            MinCapacity: !Ref DesiredCount
            ResourceId: !Join
                - /
                - - service
                  - !Ref Cluster
                  - !GetAtt SearchService.Name
            RoleARN: !Ref ECSServiceAutoScalingRoleARN
            ScalableDimension: ecs:service:DesiredCount
            ServiceNamespace: ecs

    WebServiceScaleOutPolicy:
        Type : "AWS::ApplicationAutoScaling::ScalingPolicy"
        Properties:
            PolicyName: WebServiceScaleOutPolicy
            PolicyType: StepScaling
            ScalingTargetId: !Ref WebServiceScalableTarget
            StepScalingPolicyConfiguration:
                AdjustmentType: ChangeInCapacity
                Cooldown: 1800
                MetricAggregationType: Average
                StepAdjustments:
                - MetricIntervalLowerBound: 0
                  ScalingAdjustment: 1

    WebServiceScaleInPolicy:
        Type : "AWS::ApplicationAutoScaling::ScalingPolicy"
        Properties:
            PolicyName: WebServiceScaleInPolicy
            PolicyType: StepScaling
            ScalingTargetId: !Ref WebServiceScalableTarget
            StepScalingPolicyConfiguration:
                AdjustmentType: ChangeInCapacity
                Cooldown: 1800
                MetricAggregationType: Average
                StepAdjustments:
                - MetricIntervalUpperBound: 0
                  ScalingAdjustment: -1

    DatabaseServiceScaleOutPolicy:
        Type : "AWS::ApplicationAutoScaling::ScalingPolicy"
        Properties:
            PolicyName: DatabaseServiceScaleOutPolicy
            PolicyType: StepScaling
            ScalingTargetId: !Ref DatabaseServiceScalableTarget
            StepScalingPolicyConfiguration:
                AdjustmentType: ChangeInCapacity
                Cooldown: 1800
                MetricAggregationType: Average
                StepAdjustments:
                - MetricIntervalLowerBound: 0
                  ScalingAdjustment: 1

    DatabaseServiceScaleInPolicy:
        Type : "AWS::ApplicationAutoScaling::ScalingPolicy"
        Properties:
            PolicyName: DatabaseServiceScaleInPolicy
            PolicyType: StepScaling
            ScalingTargetId: !Ref DatabaseServiceScalableTarget
            StepScalingPolicyConfiguration:
                AdjustmentType: ChangeInCapacity
                Cooldown: 1800
                MetricAggregationType: Average
                StepAdjustments:
                - MetricIntervalUpperBound: 0
                  ScalingAdjustment: -1

    SearchServiceScaleOutPolicy:
        Type : "AWS::ApplicationAutoScaling::ScalingPolicy"
        Properties:
            PolicyName: SearchServiceScaleOutPolicy
            PolicyType: StepScaling
            ScalingTargetId: !Ref SearchServiceScalableTarget
            StepScalingPolicyConfiguration:
                AdjustmentType: ChangeInCapacity
                Cooldown: 1800
                MetricAggregationType: Average
                StepAdjustments:
                - MetricIntervalLowerBound: 0
                  ScalingAdjustment: 1

    SearchServiceScaleInPolicy:
        Type : "AWS::ApplicationAutoScaling::ScalingPolicy"
        Properties:
            PolicyName: SearchServiceScaleInPolicy
            PolicyType: StepScaling
            ScalingTargetId: !Ref SearchServiceScalableTarget
            StepScalingPolicyConfiguration:
                AdjustmentType: ChangeInCapacity
                Cooldown: 1800
                MetricAggregationType: Average
                StepAdjustments:
                - MetricIntervalUpperBound: 0
                  ScalingAdjustment: -1

    CPUScaleOutAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmName: CPU utilization greater than 90%
            AlarmDescription: Alarm if cpu utilization greater than 90% of reserved cpu
            Namespace: AWS/ECS
            MetricName: CPUUtilization
            Dimensions:
            - Name: ClusterName
              Value: !Ref Cluster
            Statistic: Maximum
            Period: '60'
            EvaluationPeriods: '3'
            Threshold: '90'
            ComparisonOperator: GreaterThanThreshold
            AlarmActions:
            - !Ref WebServiceScaleOutPolicy
            - !Ref SearchServiceScaleOutPolicy
            - !Ref DatabaseServiceScaleOutPolicy

    CPUScaleInAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmName: CPU utilization less than 70%
            AlarmDescription: Alarm if cpu utilization greater than 70% of reserved cpu
            Namespace: AWS/ECS
            MetricName: CPUUtilization
            Dimensions:
            - Name: ClusterName
              Value: !Ref Cluster
            Statistic: Maximum
            Period: '60'
            EvaluationPeriods: '10'
            Threshold: '70'
            ComparisonOperator: LessThanThreshold
            AlarmActions:
            - !Ref WebServiceScaleInPolicy
            - !Ref DatabaseServiceScaleInPolicy
            - !Ref SearchServiceScaleInPolicy
